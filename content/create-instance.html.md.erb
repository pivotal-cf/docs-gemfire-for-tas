---
title: Create or Delete a Service Instance
---

 <!--
 Copyright (c) VMware, Inc. 2022. All rights reserved.
 Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 agreements. See the NOTICE file distributed with this work for additional information regarding
 copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License. You may obtain a
 copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software distributed under the License
 is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 or implied. See the License for the specific language governing permissions and limitations under
 the License.
 -->

This topic explains how to create and delete VMware GemFire for TAS services instances.

## <a id="create-SI"></a> Create a Service Instance

Run `cf create-service p-cloudcache PLAN-NAME SERVICE-INSTANCE-NAME` to create a service instance. Replace `PLAN-NAME` with the name from the list of available plans. Replace `SERVICE-INSTANCE-NAME` with a name of your choice. Use this name to refer to your service instance with other commands. Service instance names can include alpha-numeric characters, hyphens, and underscores.

<pre class='terminal'>
$ cf create-service p-cloudcache extra-large my-cloudcache
</pre>

Service instances are created asynchronously. Run the `cf services` command to view the current status of the service creation, and of other service instances in the current org and space:

<pre class='terminal'>
$ cf services
Getting services in org my-org / space my-space as user...
OK

name            service        plan    bound apps   last operation
my-cloudcache   p-cloudcache   small                create in progress
</pre>

When completed, the status changes from `create in progress` to `create succeeded`.

### <a id="params"></a> Provide Optional Parameters

You can create a customized service instance by passing optional parameters to `cf create-service` using the `-c` flag. The `-c` flag accepts a valid JSON object containing service-specific configuration parameters, provided either in-line or in a file.

The VMware GemFire for Tanzu Application Service service broker supports the following parameters:

- `tls`: A boolean, that when true, enables TLS for all communication within the cluster.
- `service_gateway`: A boolean, that when true, causes the creation of a
service gateway. The service instance must also use TLS for communication
within the cluster.
- `num_servers`: An integer that specifies the number of server instances in the cluster. The minimum value is `4`. The maximum and default values are configured by the operator.
- `new_size_percentage`: An integer that specifies the percentage of the heap to allocate to young generation. This value must be between `5` and `83`. By default, the new size is 2&nbsp;GB or 10% of heap, whichever is smaller.
- `distributed_system_id`: An integer that provides a unique identifier for a cluster that participates in a WAN.
- `shared_write_access`: A boolean, that when true, allows an app within a different space write access to the service instance when service-instance sharing is enabled.
- `pr_load_probe_class`: A property that specifies the algorithm to be used by the server when rebalancing data. Supported values are:
  - `org.apache.geode.internal.cache.partitioned.BucketCountLoadProbe`<br />
  Rebalance based on the `total-num-buckets` configuration and the number of members hosting the region.
  - `org.apache.geode.internal.cache.partitioned.SizedBasedLoadProbe`<br />
  Rebalance based on the actual size of data in each member hosting the region. This is the default rebalancing algorithm.
- `advanced_configuration`: A property that allows users to configure custom JVM options, GemFire
  properties, credentials, and Resource Manager properties.  **This property is not recommended for general use.**
  It is intended only for advanced users and support staff. See [Advanced Service
  Instance Configuration](advanced-configuration.html) for details.


This example enables TLS within the cluster:

<pre class='terminal'>
$ cf create-service p-cloudcache small TLS-cluster -c '{"tls": true}'
</pre>

This example creates a service gateway that is connected to the cluster:

<pre class='terminal'>
$ cf create-service p-cloudcache small TLS-cluster -c '{"tls": true, “service_gateway”: true}'
</pre>

This example creates the service with five service instances in the cluster:

<pre class='terminal'>
$ cf create-service p-cloudcache small my-cloudcache -c '{"num_servers": 5}'
</pre>

This example assigns the service a specific distributed system ID, which is important when restoring a WAN participant from backups:

<pre class='terminal'>
$ cf create-service p-cloudcache small my-cloudcache -c '{"distributed_system_id": 2}'
</pre>

This example creates a cluster that allows write access by an app in
a different space when service-instance sharing is enabled.

<pre class='terminal'>
$ cf create-service p-cloudcache small my-cloudcache -c '{"shared_write_access":true}'
</pre>

### <a id="service-instance-dev-plan"></a> Single-VM Plans

The Colocated Single-VM Plan is a type of service plan
that is useful for development and testing.
This example creates a Colocated Single-VM Plan service instance:

<pre class='terminal'>
$ cf create-service p-cloudcache dev-plan my-dev-cloudcache
</pre>

The plan provides a single locator and a single server colocated
within a single VM.
Because the VM is recycled when the service instance is updated or upgraded,
all data within the region is lost upon update or upgrade.

When post-deploy scripts are enabled for Ops Manager,
the service instance is created with a single sample region
called `example_partition_region`.
The region is of type `PARTITION_REDUNDANT_HEAP_LRU`,
as described in [Partitioned Region Types for Creating Regions on the Server](region-design.html#partitioned-types).

If `example_partition_region` has **not** been created,
it is probably because post-deploy scripts are not enabled for Ops Manager,
as described in [Configure a Co-located Single VM Plan](./install-configure.html#dev-plan).

## <a id="delete-SI"></a> Delete a Service Instance

You can delete service instances using the cf CLI. Before doing so, you must remove any existing service keys and app bindings.

1. Run `cf delete-service-key SERVICE-INSTANCE-NAME KEY-NAME` to delete the service key.
1. Run `cf unbind-service APP-NAME SERVICE-INSTANCE-NAME` to unbind your app from the service instance.
1. Run `cf delete-service SERVICE-INSTANCE-NAME` to delete the service instance.

<pre class='terminal'>
$ cf delete-service-key my-cloudcache my-service-key
$ cf unbind-service my-app my-cloudcache
$ cf delete-service my-cloudcache
</pre>

Deletions are asynchronous. Run `cf services` to view the current status of the service instance deletion.

