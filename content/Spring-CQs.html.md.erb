---
title: Creating Continuous Queries Using Spring Data GemFire
---

 <!--
 Copyright (c) VMware, Inc. 2022. All rights reserved.
 Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 agreements. See the NOTICE file distributed with this work for additional information regarding
 copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License. You may obtain a
 copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software distributed under the License
 is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 or implied. See the License for the specific language governing permissions and limitations under
 the License.
 -->

This topic discusses creating continuous queries using Spring Data GemFire for use with VMware GemFire for TAS.


<a id="CQs-spring-data-gemfire"></a>

To create continuous queries with the Spring Data GemFire library, you must have the following:

* Spring Data GemFire v2.1.0+
* Spring Boot v2.1.0+

To create continuous queries, do the following  items:

- Specify attributes `subscriptionEnabled` and `readyForEvents` for
the `ClientCacheApplication` annotation.
Apply this annotation to the Spring Boot client application class:

    ```java
    @ClientCacheApplication(name = "GemFireSpringApplication", readyForEvents = true,
      subscriptionEnabled = true)
    ```
The annotation for a durable event queue for continuous queries also sets the
`durableClientId` and `keepAlive` attributes. For example:

    ```java
    @ClientCacheApplication(name = "GemFireSpringApplication",
      durableClientId = "durable-client-id", keepAlive = true,
      readyForEvents = true, subscriptionEnabled = true)
    ```
-  Annotate the method that handles the events to specify the query.
To make the event queue durable across server failures and restarts,
include the `durable = true` attribute in the annotation,
as is done in the example:

    ``` java
    @Component
    public class ContinuousQuery {

        @ContinuousQuery(name = "yourQuery",
           query = "SELECT * FROM /yourRegion WHERE someAttribute == true",
           durable = true)
        public void handleChanges(CqEvent event) {
          //PERFORM SOME ACTION
        }
    }
    ```
    The class that contains the method with the @ContinuousQuery annotation must have the @Component annotation, such that the continuous query is wired up correctly for the server.

For more information, see the [Spring Data GemFire documentation](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/).
