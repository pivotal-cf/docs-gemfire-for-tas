---
title: Service-Instance Sharing
---

 <!--
 Copyright (c) VMware, Inc. 2022. All rights reserved.
 Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 agreements. See the NOTICE file distributed with this work for additional information regarding
 copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License. You may obtain a
 copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software distributed under the License
 is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 or implied. See the License for the specific language governing permissions and limitations under
 the License.
 -->

Service-instance sharing for VMware GemFire for Tanzu Application Service permits access
to a GemFire for TAS service instance by an app
within a different space.
Read-only access of the data by the app is configured by default.

Follow these steps to set up sharing:

1. A Cloud Foundry operator enables instance sharing as detailed in
[Enabling Service-Instance Sharing](op-instance-sharing.html)
2. (Optional) To give the app write access to the data,
a developer creates the service instance with service
instance sharing enabled as defined in
[Provide Optional Parameters](create-instance.html#params).
3. A developer shares a service instance
4. A developer binds the app to the shared service instance

These instructions require identification of the org and the space of
both the service instance and the app.
The following diagram names the components for use in the configuration
instructions.
Service instance X resides within space C, which is part of org A.
App Y resides within space D, which is part of org B.

![diagram of spaces within orgs](./images/instance-sharing.png)

## <a id="set-up-sharing"></a> Share a Service Instance

The GemFire for TAS service instance must be up and running prior to sharing.

To share the service instance:

1. An org A developer does a `cf login` with a space developer role.
Target the space that contains the service to be shared: org A, space C.

3. The org A developer shares the space with a command of the form

    ```
    cf share-service SERVICE-X -s SPACE-D -o ORG-B
    ```

    Replace `SERVICE-X` with the GemFire for TAS service instance name.
    Replace `SPACE-D` with the space name where the app resides.
    Replace `ORG-B` with the org name where the app resides.

## <a id="binding-sharing"></a> Bind an App to a Shared Service Instance

The app must be bound to the shared service instance prior to starting
the app.

To bind the app to the shared service instance:

1. An org B developer does a `cf login` with a space developer role.
Target the org and space that contains the app: org B, space D.

2. Verify that the GemFire for TAS service instance is available and
shared across the spaces in the output of the command:

    <pre class='terminal'>
    $ cf services
    </pre>

3. The org B developer binds the app with a command of the form

    ```
    cf bind APP-Y SERVICE-X
    ```

    Replace `SERVICE-X` with the GemFire for TAS service instance name.
    Replace `APP-Y` with the name of the app.

## <a id="app-sharing-details"></a> App Authentication

Apps that interact with a shared GemFire for TAS service instance
which resides in a different space
will be given a set of credentials.
The app must acquire and use this set of credentials for authentication.
Apps built with Spring Boot Data GemFire version 1.1.1 or a more
recent version will automatically pick up the credentials,
so these apps do not need to acquire the credentials.

By default, the role of these credentials is authorized only for read
access of region data.
If the cluster is created with the `shared_write_access` parameter,
the cluster operator role will be used, authorizing
the operations for that role, as defined in [Security](security.html).

The set of credentials are in the VCAP_SERVICES environment variable,
with a role of `readonly` or `cluster_operator_XXX`.
The app must parse the VCAP_SERVICES environment variable to
extract the credentials.
The app uses the credentials to set a property that then gets passed
to the `ClientCacheFactory` for the purpose of authentication
prior to creating the cache.

