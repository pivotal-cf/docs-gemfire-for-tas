---
title: VMware GemFire for TAS Architecture
---

 <!--
 Copyright (c) VMware, Inc. 2022. All rights reserved.
 Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 agreements. See the NOTICE file distributed with this work for additional information regarding
 copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License. You may obtain a
 copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software distributed under the License
 is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 or implied. See the License for the specific language governing permissions and limitations under
 the License.
 -->

This topic introduces and describes VMware GemFire for TAS architecture.

## <a id='GFBasics'></a>VMware GemFire Basics

VMware GemFire is the data store within VMware GemFire for Tanzu Application Service.
A GemFire for TAS service instance requires a small amount of administrative setup, and any app will use a limited portion of the API.

The GemFire for TAS architectural model is a client-server model. The clients are apps or microservices, and the servers are a set of cluster servers maintained by a GemFire for TAS service instance. The servers provide a low-latency, consistent, fault-tolerant data store within GemFire for TAS.

![Client Server Model](images/client-server.png)

The cluster holds data in key/value pairs. Each pair is called an **entry**. Entries are logically grouped into sets called **regions**. A region is a map (or dictionary) data structure.

The app (client) uses GemFire for TAS as a cache. A cache lookup (read) is a get operation on a region. The cache operation of a cache write is a put operation on a region.
The command-line interface, named `gfsh`, facilitates region administration. Use `gfsh` to create and destroy regions within the GemFire for TAS service instance.

## <a id='AppLocation'></a>The App's Location

A running app's location affects how it communicates with the
GemFire for TAS service instance.
Apps may run in one of three locations:

- In the services foundation where the GemFire for TAS
service instance runs. These apps require no extra communication support.
- In an app foundation, where a user-provided service instance proxies
the communication to the GemFire for TAS service instance.
Communication with the GemFire for TAS service instance requires
a service gateway.
- Outside of any platform, where a platform is composed of any and all
foundations.
Communication with the GemFire for TAS service instance requires
a service gateway.

![Interaction of Apps and Foundations](images/app-location.png)

To use a service gateway, the operator must
[Configuring a Service Gateway](configure-service-gateway.html).
The developer must [Provide Optional Parameters](create-instance.html#params)
when creating the GemFire for TAS service instance.
And, the app must be given and use properties that authenticate
and authorize [Communicating with a Service Instance](running-app.html#app-location) through the service gateway.

## <a id='MemberCommunication'></a>Member Communication

When a client connects to the cluster, it first connects to a locator. The locator replies with the IP address of a server for it to talk to. The client then connects to that server.

![Member Communication 1](./images/member-comms-1.png)

When the client wants to read or write data, it sends a request directly to the server.

![Member Communication 2](./images/member-comms-2.png)

If the server doesn't have the data locally, it fetches it from another server.

![Member Communication 3](./images/member-comms-3.png)
