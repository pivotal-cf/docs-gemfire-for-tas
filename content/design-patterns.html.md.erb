---
title: Design Patterns
---

 <!-- 
 Copyright (c) VMware, Inc. 2022. All rights reserved.
 Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 agreements. See the NOTICE file distributed with this work for additional information regarding
 copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License. You may obtain a
 copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software distributed under the License
 is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 or implied. See the License for the specific language governing permissions and limitations under
 the License.
 -->

This topic discusses design patterns for use with VMware GemFire for TAS.

<a id="design-patterns"></a>

The design patterns in this section are intended as overviews of common and useful configurations.
Effective implementations will require planning&mdash;consult with a system architect to fill in the design details for your app.

## <a id="inline-cache"></a> The Inline Cache

An inline cache places the caching layer between the app
and the backend data store.

![inline caching pattern](./images/inline.png)

The app will want to accomplish CRUD
(create, read, update, delete) operations on its data.
The app's implementation of the CRUD operations result in cache operations
that break down into cache lookups (reads) and/or cache writes.

The algorithm for a cache lookup quickly returns the cache entry
when the entry is in the cache.
This is a cache hit.
If the entry is not in the cache, it is a cache miss,
and code on the cache server retrieves the entry
from the backend data store.
In the typical implementation,
the entry returned from the backend data store on a cache miss
is written to the cache,
such that subsequent cache lookups of that same entry result in cache hits.

The implementation for a cache write typically creates or updates
the entry within the cache.
It also creates or updates the data store in one of the following ways:

- Synchronously, in a write-through manner. Each write operation from the
app is sent on to be written to the backend data store.
After the backend data store write finishes,
the value is also written to the cache.
The app blocks until the writes to both the backend data store and
the cache complete.
- Asynchronously, in a write-behind manner. The cache gets updated,
and the value to be written to the backend data store gets queued. 
Control then returns to the app, which continues independent of the
write to the backend data store.

Developers design the server code to implement this inline-caching pattern.
See [Setting Up Servers for an Inline Cache](inline-setup.html)
for details about the custom server code and how to configure
an inline cache.

## <a id="cacheaside-cache"></a> The Cache-Aside Cache

The cache-aside pattern of caching places the app in charge
of communication with both the cache and the backend data store.

![cache-aside caching pattern](./images/look-aside.png)

The app will want to accomplish CRUD
(CREATE, READ, UPDATE, DELETE) operations on its data.
That data may be 

- in both the data store and the cache
- in the data store, but not in the cache
- not in either the data store or the cache

The app's implementation of the CRUD operations result in cache operations
that break down into cache lookups (reads) and/or cache writes.

The algorithm for a cache lookup returns the cache entry
when the entry is in the cache.
This is a cache hit.
If the entry is not in the cache, it is a cache miss,
and the app attempts to retrieve the entry from the data store.
In the typical implementation,
the entry returned from the backend data store is written to the cache,
such that subsequent cache lookups of that same entry result in cache hits.

The cache-aside pattern of caching leaves the app free to implement
whatever it chooses if the data store does not have the entry.

The algorithm for a cache write implements one of these:

- The entry is either updated or created within the data store,
and the entry is updated within or written to the cache.
- The entry is either updated or created within the backend data store,
and the copy currently within the cache is invalidated.

<p class='note'><strong>Note:</strong> SDG (Spring Data Geode) 
supports the cache-aside pattern, as detailed at
<a href="https://docs.spring.io/spring-data/geode/docs/current/reference/html/#bootstrap-annotation-config-caching">Configuring Spring's Cache Abstraction</a>.</p>

## <a id="active-active-WAN-pattern"></a> Bidirectional Replication Across a WAN

Two VMware GemFire for Tanzu Application Service service instances may be connected across a WAN to form
a single distributed system with asynchronous communication.
The cluster within each of the GemFire for TAS service instances will host the same region.
Updates to either GemFire for TAS service instance
are propagated across the WAN to the other GemFire for TAS service instance.
The distributed system implements an eventual consistency
of the region
that also handles write conflicts which occur when a single
region entry is modified in both GemFire for TAS service instances at the same
time.

In this active-active system, an external entity implements load-balancing 
by directing app connections to one of the two service instances. 
If one of the GemFire for TAS service instances fails,
apps may be redirected to the remaining service instance.

This diagram shows multiple instances of an app interacting
with one of the two GemFire for TAS service instances, cluster A and cluster B.
Any change made in cluster A is sent to cluster B,
and any change made in cluster B is sent to cluster A.

![Bidirectional WAN replication pattern](./images/WAN-bidirectional.png)

## <a id="WAN-pattern"></a> Blue-Green Disaster Recovery

Two GemFire for TAS service instances may be connected across a WAN to form
a single distributed system with asynchronous communication.
An expected use case propagates all changes to a region's data
from the cluster within one service instance (the primary) to the other,
where both service instances reside in the same foundation.
The replicate increases the fault tolerance of the system by
acting as a "hot" spare.
In the scenario of the failure of an entire data center or an
availability zone,
you can rebind apps to the replicate and restage them.
The replicate then takes over as the primary.

In this diagram, cluster A is primary, and it replicates all data
across a WAN to cluster B.

![WAN replication pattern](./images/WAN1.png)

If cluster A fails, you can manually rebind and restage the apps so that
cluster B takes over.

![WAN replicate becomes primary](./images/WAN2.png)

## <a id="CQRS-WAN-pattern"></a> CQRS Pattern Across a WAN

Two GemFire for TAS service instances may be connected across a WAN to form
a single distributed system that implements
a CQRS (Command Query Responsibility Segregation) pattern.
Within this pattern, commands are those that change the state,
where state is represented by region contents.
All region operations that change state are directed to the cluster within one
GemFire for TAS service instance.
The changes are propagated asynchronously to the cluster within the other
GemFire for TAS service instance via WAN replication,
and that other cluster provides only query access to the region data.

This diagram shows an app that may update the region
within the GemFire for TAS service instance of cluster A.
Changes are propagated across the WAN to cluster B. 
The app bound to cluster B may only query the region data;
it will not create entries or update the region.

![CQRS WAN replication pattern](./images/WAN-CQRS.png)

## <a id="hub-spoke-pattern"></a> Hub-and-Spoke Topology with WAN Replication

Multiple GemFire for TAS service instances connected across a WAN
form a single hub and a set of spokes.
This diagram shows GemFire for TAS service instance A is the hub,
and GemFire for TAS service instances B, C, and D are spokes.

![Hub-and-Spoke pattern](./images/hub-spoke.png)

A common implementation that uses this topology directs all app operations
that write or update region contents to the hub.
Writes and updates are then propagated asynchronously across the WAN
from the hub to the spokes.

## <a id="follow-the-sun-pattern"></a> Follow-the-Sun Pattern

Performance improves when operation requests originate
in close proximity to the service instance that handles
those requests.
Yet many data sets are relevant and used all over the world.
If the most active location for write and update operations moves over the
course of a day,
then a performant design pattern is a variation on the hub-and-spoke
implementation that changes which GemFire for TAS service instance is the hub
to the most active location.

Form a ring that contains each GemFire for TAS service instance that will
act as the hub.
Define a token to identify the hub.
Over time, pass the token from one GemFire for TAS service instance to the
next, around the ring.

This diagram shows GemFire for TAS service instance A is the hub,
as it has the token, represented in this diagram as a star.
GemFire for TAS service instances B, C, and D are spokes.
Write and update operations are directed to the hub.

![Follow-the-Sun pattern, A is the hub](./images/follow-the-sun-1.png)

This diagram shows that the token has passed from A to B,
and B has become the hub.

![Follow-the-Sun pattern, B is the hub](./images/follow-the-sun-2.png)
